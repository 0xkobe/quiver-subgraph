// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddFreeAllocation extends ethereum.Event {
  get params(): AddFreeAllocation__Params {
    return new AddFreeAllocation__Params(this);
  }
}

export class AddFreeAllocation__Params {
  _event: AddFreeAllocation;

  constructor(event: AddFreeAllocation) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class DepositQstk extends ethereum.Event {
  get params(): DepositQstk__Params {
    return new DepositQstk__Params(this);
  }
}

export class DepositQstk__Params {
  _event: DepositQstk;

  constructor(event: DepositQstk) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MintNFT extends ethereum.Event {
  get params(): MintNFT__Params {
    return new MintNFT__Params(this);
  }
}

export class MintNFT__Params {
  _event: MintNFT;

  constructor(event: MintNFT) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get imageId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bgImageId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get favCoinId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get lockOptionId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get creator_name(): string {
    return this._event.parameters[6].value.toString();
  }

  get color(): string {
    return this._event.parameters[7].value.toString();
  }

  get story(): string {
    return this._event.parameters[8].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PauseMint extends ethereum.Event {
  get params(): PauseMint__Params {
    return new PauseMint__Params(this);
  }
}

export class PauseMint__Params {
  _event: PauseMint;

  constructor(event: PauseMint) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pausedAt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RemoveFreeAllocation extends ethereum.Event {
  get params(): RemoveFreeAllocation__Params {
    return new RemoveFreeAllocation__Params(this);
  }
}

export class RemoveFreeAllocation__Params {
  _event: RemoveFreeAllocation;

  constructor(event: RemoveFreeAllocation) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetFoundationWallet extends ethereum.Event {
  get params(): SetFoundationWallet__Params {
    return new SetFoundationWallet__Params(this);
  }
}

export class SetFoundationWallet__Params {
  _event: SetFoundationWallet;

  constructor(event: SetFoundationWallet) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get wallet(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetTotalSupply extends ethereum.Event {
  get params(): SetTotalSupply__Params {
    return new SetTotalSupply__Params(this);
  }
}

export class SetTotalSupply__Params {
  _event: SetTotalSupply;

  constructor(event: SetTotalSupply) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get totalSupply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StartMint extends ethereum.Event {
  get params(): StartMint__Params {
    return new StartMint__Params(this);
  }
}

export class StartMint__Params {
  _event: StartMint;

  constructor(event: StartMint) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get startedAt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UnlockQstkFromNft extends ethereum.Event {
  get params(): UnlockQstkFromNft__Params {
    return new UnlockQstkFromNft__Params(this);
  }
}

export class UnlockQstkFromNft__Params {
  _event: UnlockQstkFromNft;

  constructor(event: UnlockQstkFromNft) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UnpauseMint extends ethereum.Event {
  get params(): UnpauseMint__Params {
    return new UnpauseMint__Params(this);
  }
}

export class UnpauseMint__Params {
  _event: UnpauseMint;

  constructor(event: UnpauseMint) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get unPausedAt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpgradeNftBackground extends ethereum.Event {
  get params(): UpgradeNftBackground__Params {
    return new UpgradeNftBackground__Params(this);
  }
}

export class UpgradeNftBackground__Params {
  _event: UpgradeNftBackground;

  constructor(event: UpgradeNftBackground) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get oldBgImageId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newBgImageId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UpgradeNftCoin extends ethereum.Event {
  get params(): UpgradeNftCoin__Params {
    return new UpgradeNftCoin__Params(this);
  }
}

export class UpgradeNftCoin__Params {
  _event: UpgradeNftCoin;

  constructor(event: UpgradeNftCoin) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get oldFavCoinId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newFavCoinId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UpgradeNftImage extends ethereum.Event {
  get params(): UpgradeNftImage__Params {
    return new UpgradeNftImage__Params(this);
  }
}

export class UpgradeNftImage__Params {
  _event: UpgradeNftImage;

  constructor(event: UpgradeNftImage) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get oldImageId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newImageId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class WithdrawQstk extends ethereum.Event {
  get params(): WithdrawQstk__Params {
    return new WithdrawQstk__Params(this);
  }
}

export class WithdrawQstk__Params {
  _event: WithdrawQstk;

  constructor(event: WithdrawQstk) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class QNFT__nftDataResultMetaStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get color(): string {
    return this[1].toString();
  }

  get story(): string {
    return this[2].toString();
  }
}

export class QNFT__nftDataResultCreatorStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get wallet(): Address {
    return this[1].toAddress();
  }
}

export class QNFT__nftDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: boolean;
  value8: QNFT__nftDataResultMetaStruct;
  value9: QNFT__nftDataResultCreatorStruct;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: boolean,
    value8: QNFT__nftDataResultMetaStruct,
    value9: QNFT__nftDataResultCreatorStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromTuple(this.value8));
    map.set("value9", ethereum.Value.fromTuple(this.value9));
    return map;
  }
}

export class QNFT extends ethereum.SmartContract {
  static bind(address: Address): QNFT {
    return new QNFT("QNFT", address);
  }

  FOUNDATION_PERCENTAGE(): BigInt {
    let result = super.call(
      "FOUNDATION_PERCENTAGE",
      "FOUNDATION_PERCENTAGE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_FOUNDATION_PERCENTAGE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FOUNDATION_PERCENTAGE",
      "FOUNDATION_PERCENTAGE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_VOTE_DURATION(): BigInt {
    let result = super.call(
      "MIN_VOTE_DURATION",
      "MIN_VOTE_DURATION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_VOTE_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_VOTE_DURATION",
      "MIN_VOTE_DURATION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  NFT_SALE_DURATION(): BigInt {
    let result = super.call(
      "NFT_SALE_DURATION",
      "NFT_SALE_DURATION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_NFT_SALE_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "NFT_SALE_DURATION",
      "NFT_SALE_DURATION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PERCENT_MAX(): BigInt {
    let result = super.call("PERCENT_MAX", "PERCENT_MAX():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PERCENT_MAX(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PERCENT_MAX", "PERCENT_MAX():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SAFE_VOTE_END_DURATION(): BigInt {
    let result = super.call(
      "SAFE_VOTE_END_DURATION",
      "SAFE_VOTE_END_DURATION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SAFE_VOTE_END_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SAFE_VOTE_END_DURATION",
      "SAFE_VOTE_END_DURATION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  circulatingSupply(): BigInt {
    let result = super.call(
      "circulatingSupply",
      "circulatingSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_circulatingSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "circulatingSupply",
      "circulatingSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  foundationWallet(): Address {
    let result = super.call(
      "foundationWallet",
      "foundationWallet():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_foundationWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "foundationWallet",
      "foundationWallet():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  freeAllocations(param0: Address): BigInt {
    let result = super.call(
      "freeAllocations",
      "freeAllocations(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_freeAllocations(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "freeAllocations",
      "freeAllocations(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintFinished(): boolean {
    let result = super.call("mintFinished", "mintFinished():(bool)", []);

    return result[0].toBoolean();
  }

  try_mintFinished(): ethereum.CallResult<boolean> {
    let result = super.tryCall("mintFinished", "mintFinished():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintPaused(): boolean {
    let result = super.call("mintPaused", "mintPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_mintPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("mintPaused", "mintPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintStartTime(): BigInt {
    let result = super.call("mintStartTime", "mintStartTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mintStartTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintStartTime",
      "mintStartTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintStarted(): boolean {
    let result = super.call("mintStarted", "mintStarted():(bool)", []);

    return result[0].toBoolean();
  }

  try_mintStarted(): ethereum.CallResult<boolean> {
    let result = super.tryCall("mintStarted", "mintStarted():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nftData(param0: BigInt): QNFT__nftDataResult {
    let result = super.call(
      "nftData",
      "nftData(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,(string,string,string),(string,address))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new QNFT__nftDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBoolean(),
      result[8].toTuple() as QNFT__nftDataResultMetaStruct,
      result[9].toTuple() as QNFT__nftDataResultCreatorStruct
    );
  }

  try_nftData(param0: BigInt): ethereum.CallResult<QNFT__nftDataResult> {
    let result = super.tryCall(
      "nftData",
      "nftData(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,(string,string,string),(string,address))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new QNFT__nftDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBoolean(),
        value[8].toTuple() as QNFT__nftDataResultMetaStruct,
        value[9].toTuple() as QNFT__nftDataResultCreatorStruct
      )
    );
  }

  nftMinted(
    _imageId: BigInt,
    _bgImageId: BigInt,
    _favCoinId: BigInt,
    _lockOptionId: BigInt
  ): boolean {
    let result = super.call(
      "nftMinted",
      "nftMinted(uint256,uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_imageId),
        ethereum.Value.fromUnsignedBigInt(_bgImageId),
        ethereum.Value.fromUnsignedBigInt(_favCoinId),
        ethereum.Value.fromUnsignedBigInt(_lockOptionId)
      ]
    );

    return result[0].toBoolean();
  }

  try_nftMinted(
    _imageId: BigInt,
    _bgImageId: BigInt,
    _favCoinId: BigInt,
    _lockOptionId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "nftMinted",
      "nftMinted(uint256,uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_imageId),
        ethereum.Value.fromUnsignedBigInt(_bgImageId),
        ethereum.Value.fromUnsignedBigInt(_favCoinId),
        ethereum.Value.fromUnsignedBigInt(_lockOptionId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  qstk(): Address {
    let result = super.call("qstk", "qstk():(address)", []);

    return result[0].toAddress();
  }

  try_qstk(): ethereum.CallResult<Address> {
    let result = super.tryCall("qstk", "qstk():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  qstkBalances(param0: Address): BigInt {
    let result = super.call("qstkBalances", "qstkBalances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_qstkBalances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "qstkBalances",
      "qstkBalances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  remainingQstk(): BigInt {
    let result = super.call("remainingQstk", "remainingQstk():(uint256)", []);

    return result[0].toBigInt();
  }

  try_remainingQstk(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "remainingQstk",
      "remainingQstk():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalAssignedQstk(): BigInt {
    let result = super.call(
      "totalAssignedQstk",
      "totalAssignedQstk():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAssignedQstk(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAssignedQstk",
      "totalAssignedQstk():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalQstkBalance(): BigInt {
    let result = super.call(
      "totalQstkBalance",
      "totalQstkBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalQstkBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalQstkBalance",
      "totalQstkBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  voteStatus(): i32 {
    let result = super.call("voteStatus", "voteStatus():(uint8)", []);

    return result[0].toI32();
  }

  try_voteStatus(): ethereum.CallResult<i32> {
    let result = super.tryCall("voteStatus", "voteStatus():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _qstk(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _settings(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _governance(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _foundationWallet(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddFreeAllocationCall extends ethereum.Call {
  get inputs(): AddFreeAllocationCall__Inputs {
    return new AddFreeAllocationCall__Inputs(this);
  }

  get outputs(): AddFreeAllocationCall__Outputs {
    return new AddFreeAllocationCall__Outputs(this);
  }
}

export class AddFreeAllocationCall__Inputs {
  _call: AddFreeAllocationCall;

  constructor(call: AddFreeAllocationCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddFreeAllocationCall__Outputs {
  _call: AddFreeAllocationCall;

  constructor(call: AddFreeAllocationCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class DepositQstkCall extends ethereum.Call {
  get inputs(): DepositQstkCall__Inputs {
    return new DepositQstkCall__Inputs(this);
  }

  get outputs(): DepositQstkCall__Outputs {
    return new DepositQstkCall__Outputs(this);
  }
}

export class DepositQstkCall__Inputs {
  _call: DepositQstkCall;

  constructor(call: DepositQstkCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositQstkCall__Outputs {
  _call: DepositQstkCall;

  constructor(call: DepositQstkCall) {
    this._call = call;
  }
}

export class MintNFTCall extends ethereum.Call {
  get inputs(): MintNFTCall__Inputs {
    return new MintNFTCall__Inputs(this);
  }

  get outputs(): MintNFTCall__Outputs {
    return new MintNFTCall__Outputs(this);
  }
}

export class MintNFTCall__Inputs {
  _call: MintNFTCall;

  constructor(call: MintNFTCall) {
    this._call = call;
  }

  get _imageId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _bgImageId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _favCoinId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _lockOptionId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _lockAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _defaultImageIndex(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[6].value.toString();
  }

  get _creator_name(): string {
    return this._call.inputValues[7].value.toString();
  }

  get _color(): string {
    return this._call.inputValues[8].value.toString();
  }

  get _story(): string {
    return this._call.inputValues[9].value.toString();
  }
}

export class MintNFTCall__Outputs {
  _call: MintNFTCall;

  constructor(call: MintNFTCall) {
    this._call = call;
  }
}

export class PauseMintCall extends ethereum.Call {
  get inputs(): PauseMintCall__Inputs {
    return new PauseMintCall__Inputs(this);
  }

  get outputs(): PauseMintCall__Outputs {
    return new PauseMintCall__Outputs(this);
  }
}

export class PauseMintCall__Inputs {
  _call: PauseMintCall;

  constructor(call: PauseMintCall) {
    this._call = call;
  }
}

export class PauseMintCall__Outputs {
  _call: PauseMintCall;

  constructor(call: PauseMintCall) {
    this._call = call;
  }
}

export class RemoveFreeAllocationCall extends ethereum.Call {
  get inputs(): RemoveFreeAllocationCall__Inputs {
    return new RemoveFreeAllocationCall__Inputs(this);
  }

  get outputs(): RemoveFreeAllocationCall__Outputs {
    return new RemoveFreeAllocationCall__Outputs(this);
  }
}

export class RemoveFreeAllocationCall__Inputs {
  _call: RemoveFreeAllocationCall;

  constructor(call: RemoveFreeAllocationCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveFreeAllocationCall__Outputs {
  _call: RemoveFreeAllocationCall;

  constructor(call: RemoveFreeAllocationCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetFoundationWalletCall extends ethereum.Call {
  get inputs(): SetFoundationWalletCall__Inputs {
    return new SetFoundationWalletCall__Inputs(this);
  }

  get outputs(): SetFoundationWalletCall__Outputs {
    return new SetFoundationWalletCall__Outputs(this);
  }
}

export class SetFoundationWalletCall__Inputs {
  _call: SetFoundationWalletCall;

  constructor(call: SetFoundationWalletCall) {
    this._call = call;
  }

  get _foundationWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFoundationWalletCall__Outputs {
  _call: SetFoundationWalletCall;

  constructor(call: SetFoundationWalletCall) {
    this._call = call;
  }
}

export class SetTotalSupplyCall extends ethereum.Call {
  get inputs(): SetTotalSupplyCall__Inputs {
    return new SetTotalSupplyCall__Inputs(this);
  }

  get outputs(): SetTotalSupplyCall__Outputs {
    return new SetTotalSupplyCall__Outputs(this);
  }
}

export class SetTotalSupplyCall__Inputs {
  _call: SetTotalSupplyCall;

  constructor(call: SetTotalSupplyCall) {
    this._call = call;
  }

  get _totalSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTotalSupplyCall__Outputs {
  _call: SetTotalSupplyCall;

  constructor(call: SetTotalSupplyCall) {
    this._call = call;
  }
}

export class StartMintCall extends ethereum.Call {
  get inputs(): StartMintCall__Inputs {
    return new StartMintCall__Inputs(this);
  }

  get outputs(): StartMintCall__Outputs {
    return new StartMintCall__Outputs(this);
  }
}

export class StartMintCall__Inputs {
  _call: StartMintCall;

  constructor(call: StartMintCall) {
    this._call = call;
  }
}

export class StartMintCall__Outputs {
  _call: StartMintCall;

  constructor(call: StartMintCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnPauseMintCall extends ethereum.Call {
  get inputs(): UnPauseMintCall__Inputs {
    return new UnPauseMintCall__Inputs(this);
  }

  get outputs(): UnPauseMintCall__Outputs {
    return new UnPauseMintCall__Outputs(this);
  }
}

export class UnPauseMintCall__Inputs {
  _call: UnPauseMintCall;

  constructor(call: UnPauseMintCall) {
    this._call = call;
  }
}

export class UnPauseMintCall__Outputs {
  _call: UnPauseMintCall;

  constructor(call: UnPauseMintCall) {
    this._call = call;
  }
}

export class UnlockQstkFromNftCall extends ethereum.Call {
  get inputs(): UnlockQstkFromNftCall__Inputs {
    return new UnlockQstkFromNftCall__Inputs(this);
  }

  get outputs(): UnlockQstkFromNftCall__Outputs {
    return new UnlockQstkFromNftCall__Outputs(this);
  }
}

export class UnlockQstkFromNftCall__Inputs {
  _call: UnlockQstkFromNftCall;

  constructor(call: UnlockQstkFromNftCall) {
    this._call = call;
  }

  get _nftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnlockQstkFromNftCall__Outputs {
  _call: UnlockQstkFromNftCall;

  constructor(call: UnlockQstkFromNftCall) {
    this._call = call;
  }
}

export class UpgradeNftBackgroundCall extends ethereum.Call {
  get inputs(): UpgradeNftBackgroundCall__Inputs {
    return new UpgradeNftBackgroundCall__Inputs(this);
  }

  get outputs(): UpgradeNftBackgroundCall__Outputs {
    return new UpgradeNftBackgroundCall__Outputs(this);
  }
}

export class UpgradeNftBackgroundCall__Inputs {
  _call: UpgradeNftBackgroundCall;

  constructor(call: UpgradeNftBackgroundCall) {
    this._call = call;
  }

  get _nftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _bgImageId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpgradeNftBackgroundCall__Outputs {
  _call: UpgradeNftBackgroundCall;

  constructor(call: UpgradeNftBackgroundCall) {
    this._call = call;
  }
}

export class UpgradeNftCoinCall extends ethereum.Call {
  get inputs(): UpgradeNftCoinCall__Inputs {
    return new UpgradeNftCoinCall__Inputs(this);
  }

  get outputs(): UpgradeNftCoinCall__Outputs {
    return new UpgradeNftCoinCall__Outputs(this);
  }
}

export class UpgradeNftCoinCall__Inputs {
  _call: UpgradeNftCoinCall;

  constructor(call: UpgradeNftCoinCall) {
    this._call = call;
  }

  get _nftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _favCoinId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpgradeNftCoinCall__Outputs {
  _call: UpgradeNftCoinCall;

  constructor(call: UpgradeNftCoinCall) {
    this._call = call;
  }
}

export class UpgradeNftImageCall extends ethereum.Call {
  get inputs(): UpgradeNftImageCall__Inputs {
    return new UpgradeNftImageCall__Inputs(this);
  }

  get outputs(): UpgradeNftImageCall__Outputs {
    return new UpgradeNftImageCall__Outputs(this);
  }
}

export class UpgradeNftImageCall__Inputs {
  _call: UpgradeNftImageCall;

  constructor(call: UpgradeNftImageCall) {
    this._call = call;
  }

  get _nftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _imageId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpgradeNftImageCall__Outputs {
  _call: UpgradeNftImageCall;

  constructor(call: UpgradeNftImageCall) {
    this._call = call;
  }
}

export class UpgradeQStkCall extends ethereum.Call {
  get inputs(): UpgradeQStkCall__Inputs {
    return new UpgradeQStkCall__Inputs(this);
  }

  get outputs(): UpgradeQStkCall__Outputs {
    return new UpgradeQStkCall__Outputs(this);
  }
}

export class UpgradeQStkCall__Inputs {
  _call: UpgradeQStkCall;

  constructor(call: UpgradeQStkCall) {
    this._call = call;
  }

  get _qstk(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeQStkCall__Outputs {
  _call: UpgradeQStkCall;

  constructor(call: UpgradeQStkCall) {
    this._call = call;
  }
}

export class WithdrawQstkCall extends ethereum.Call {
  get inputs(): WithdrawQstkCall__Inputs {
    return new WithdrawQstkCall__Inputs(this);
  }

  get outputs(): WithdrawQstkCall__Outputs {
    return new WithdrawQstkCall__Outputs(this);
  }
}

export class WithdrawQstkCall__Inputs {
  _call: WithdrawQstkCall;

  constructor(call: WithdrawQstkCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawQstkCall__Outputs {
  _call: WithdrawQstkCall;

  constructor(call: WithdrawQstkCall) {
    this._call = call;
  }
}
