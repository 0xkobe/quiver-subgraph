// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddBgImages extends ethereum.Event {
  get params(): AddBgImages__Params {
    return new AddBgImages__Params(this);
  }
}

export class AddBgImages__Params {
  _event: AddBgImages;

  constructor(event: AddBgImages) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get dataUrls(): Array<string> {
    return this._event.parameters[1].value.toStringArray();
  }
}

export class AddFavCoins extends ethereum.Event {
  get params(): AddFavCoins__Params {
    return new AddFavCoins__Params(this);
  }
}

export class AddFavCoins__Params {
  _event: AddFavCoins;

  constructor(event: AddFavCoins) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get mintPrices(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get dataUrls(): Array<string> {
    return this._event.parameters[2].value.toStringArray();
  }
}

export class AddImageSets extends ethereum.Event {
  get params(): AddImageSets__Params {
    return new AddImageSets__Params(this);
  }
}

export class AddImageSets__Params {
  _event: AddImageSets;

  constructor(event: AddImageSets) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get mintPrices(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get designers(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get dataUrls(): Array<string> {
    return this._event.parameters[3].value.toStringArray();
  }
}

export class AddLockOption extends ethereum.Event {
  get params(): AddLockOption__Params {
    return new AddLockOption__Params(this);
  }
}

export class AddLockOption__Params {
  _event: AddLockOption;

  constructor(event: AddLockOption) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get minAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get maxAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lockDuration(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get discount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RemoveBgImage extends ethereum.Event {
  get params(): RemoveBgImage__Params {
    return new RemoveBgImage__Params(this);
  }
}

export class RemoveBgImage__Params {
  _event: RemoveBgImage;

  constructor(event: RemoveBgImage) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bgImageId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RemoveFavCoin extends ethereum.Event {
  get params(): RemoveFavCoin__Params {
    return new RemoveFavCoin__Params(this);
  }
}

export class RemoveFavCoin__Params {
  _event: RemoveFavCoin;

  constructor(event: RemoveFavCoin) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get favCoinId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RemoveImageSet extends ethereum.Event {
  get params(): RemoveImageSet__Params {
    return new RemoveImageSet__Params(this);
  }
}

export class RemoveImageSet__Params {
  _event: RemoveImageSet;

  constructor(event: RemoveImageSet) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftImageId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RemoveLockOption extends ethereum.Event {
  get params(): RemoveLockOption__Params {
    return new RemoveLockOption__Params(this);
  }
}

export class RemoveLockOption__Params {
  _event: RemoveLockOption;

  constructor(event: RemoveLockOption) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lockOptionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetNonTokenPriceMultiplier extends ethereum.Event {
  get params(): SetNonTokenPriceMultiplier__Params {
    return new SetNonTokenPriceMultiplier__Params(this);
  }
}

export class SetNonTokenPriceMultiplier__Params {
  _event: SetNonTokenPriceMultiplier;

  constructor(event: SetNonTokenPriceMultiplier) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nonTokenPriceMultiplier(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetTokenPriceMultiplier extends ethereum.Event {
  get params(): SetTokenPriceMultiplier__Params {
    return new SetTokenPriceMultiplier__Params(this);
  }
}

export class SetTokenPriceMultiplier__Params {
  _event: SetTokenPriceMultiplier;

  constructor(event: SetTokenPriceMultiplier) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenPriceMultiplier(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class QNFTSettings__favCoinsResult {
  value0: BigInt;
  value1: string;

  constructor(value0: BigInt, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }
}

export class QNFTSettings__lockOptionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class QNFTSettings__nftImagesResult {
  value0: BigInt;
  value1: Address;
  value2: string;

  constructor(value0: BigInt, value1: Address, value2: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    return map;
  }
}

export class QNFTSettings extends ethereum.SmartContract {
  static bind(address: Address): QNFTSettings {
    return new QNFTSettings("QNFTSettings", address);
  }

  ARROW_IMAGE_COUNT(): BigInt {
    let result = super.call(
      "ARROW_IMAGE_COUNT",
      "ARROW_IMAGE_COUNT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ARROW_IMAGE_COUNT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ARROW_IMAGE_COUNT",
      "ARROW_IMAGE_COUNT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BACKGROUND_IMAGE_COUNT(): BigInt {
    let result = super.call(
      "BACKGROUND_IMAGE_COUNT",
      "BACKGROUND_IMAGE_COUNT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_BACKGROUND_IMAGE_COUNT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BACKGROUND_IMAGE_COUNT",
      "BACKGROUND_IMAGE_COUNT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  EMOTION_COUNT_PER_NFT(): BigInt {
    let result = super.call(
      "EMOTION_COUNT_PER_NFT",
      "EMOTION_COUNT_PER_NFT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_EMOTION_COUNT_PER_NFT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "EMOTION_COUNT_PER_NFT",
      "EMOTION_COUNT_PER_NFT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PERCENT_MAX(): BigInt {
    let result = super.call("PERCENT_MAX", "PERCENT_MAX():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PERCENT_MAX(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PERCENT_MAX", "PERCENT_MAX():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bgImages(param0: BigInt): string {
    let result = super.call("bgImages", "bgImages(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_bgImages(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("bgImages", "bgImages(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  bgImagesCount(): BigInt {
    let result = super.call("bgImagesCount", "bgImagesCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bgImagesCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bgImagesCount",
      "bgImagesCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcMintPrice(
    _imageId: BigInt,
    _bgImageId: BigInt,
    _favCoinId: BigInt,
    _lockOptionId: BigInt,
    _lockAmount: BigInt,
    _freeAmount: BigInt
  ): BigInt {
    let result = super.call(
      "calcMintPrice",
      "calcMintPrice(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_imageId),
        ethereum.Value.fromUnsignedBigInt(_bgImageId),
        ethereum.Value.fromUnsignedBigInt(_favCoinId),
        ethereum.Value.fromUnsignedBigInt(_lockOptionId),
        ethereum.Value.fromUnsignedBigInt(_lockAmount),
        ethereum.Value.fromUnsignedBigInt(_freeAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcMintPrice(
    _imageId: BigInt,
    _bgImageId: BigInt,
    _favCoinId: BigInt,
    _lockOptionId: BigInt,
    _lockAmount: BigInt,
    _freeAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcMintPrice",
      "calcMintPrice(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_imageId),
        ethereum.Value.fromUnsignedBigInt(_bgImageId),
        ethereum.Value.fromUnsignedBigInt(_favCoinId),
        ethereum.Value.fromUnsignedBigInt(_lockOptionId),
        ethereum.Value.fromUnsignedBigInt(_lockAmount),
        ethereum.Value.fromUnsignedBigInt(_freeAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  favCoinMintPrice(_favCoinId: BigInt): BigInt {
    let result = super.call(
      "favCoinMintPrice",
      "favCoinMintPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_favCoinId)]
    );

    return result[0].toBigInt();
  }

  try_favCoinMintPrice(_favCoinId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "favCoinMintPrice",
      "favCoinMintPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_favCoinId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  favCoins(param0: BigInt): QNFTSettings__favCoinsResult {
    let result = super.call("favCoins", "favCoins(uint256):(uint256,string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new QNFTSettings__favCoinsResult(
      result[0].toBigInt(),
      result[1].toString()
    );
  }

  try_favCoins(
    param0: BigInt
  ): ethereum.CallResult<QNFTSettings__favCoinsResult> {
    let result = super.tryCall(
      "favCoins",
      "favCoins(uint256):(uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new QNFTSettings__favCoinsResult(value[0].toBigInt(), value[1].toString())
    );
  }

  favCoinsCount(): BigInt {
    let result = super.call("favCoinsCount", "favCoinsCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_favCoinsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "favCoinsCount",
      "favCoinsCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockOptionLockDuration(_lockOptionId: BigInt): BigInt {
    let result = super.call(
      "lockOptionLockDuration",
      "lockOptionLockDuration(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_lockOptionId)]
    );

    return result[0].toBigInt();
  }

  try_lockOptionLockDuration(
    _lockOptionId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockOptionLockDuration",
      "lockOptionLockDuration(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_lockOptionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockOptions(param0: BigInt): QNFTSettings__lockOptionsResult {
    let result = super.call(
      "lockOptions",
      "lockOptions(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new QNFTSettings__lockOptionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_lockOptions(
    param0: BigInt
  ): ethereum.CallResult<QNFTSettings__lockOptionsResult> {
    let result = super.tryCall(
      "lockOptions",
      "lockOptions(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new QNFTSettings__lockOptionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  lockOptionsCount(): BigInt {
    let result = super.call(
      "lockOptionsCount",
      "lockOptionsCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lockOptionsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockOptionsCount",
      "lockOptionsCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftImageMintPrice(_nftImageId: BigInt): BigInt {
    let result = super.call(
      "nftImageMintPrice",
      "nftImageMintPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_nftImageId)]
    );

    return result[0].toBigInt();
  }

  try_nftImageMintPrice(_nftImageId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nftImageMintPrice",
      "nftImageMintPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_nftImageId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftImages(param0: BigInt): QNFTSettings__nftImagesResult {
    let result = super.call(
      "nftImages",
      "nftImages(uint256):(uint256,address,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new QNFTSettings__nftImagesResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toString()
    );
  }

  try_nftImages(
    param0: BigInt
  ): ethereum.CallResult<QNFTSettings__nftImagesResult> {
    let result = super.tryCall(
      "nftImages",
      "nftImages(uint256):(uint256,address,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new QNFTSettings__nftImagesResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toString()
      )
    );
  }

  nftImagesCount(): BigInt {
    let result = super.call("nftImagesCount", "nftImagesCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nftImagesCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nftImagesCount",
      "nftImagesCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nonTokenPriceMultiplier(): BigInt {
    let result = super.call(
      "nonTokenPriceMultiplier",
      "nonTokenPriceMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nonTokenPriceMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nonTokenPriceMultiplier",
      "nonTokenPriceMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  qnft(): Address {
    let result = super.call("qnft", "qnft():(address)", []);

    return result[0].toAddress();
  }

  try_qnft(): ethereum.CallResult<Address> {
    let result = super.tryCall("qnft", "qnft():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  qstkPrice(): BigInt {
    let result = super.call("qstkPrice", "qstkPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_qstkPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("qstkPrice", "qstkPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenPriceMultiplier(): BigInt {
    let result = super.call(
      "tokenPriceMultiplier",
      "tokenPriceMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_tokenPriceMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenPriceMultiplier",
      "tokenPriceMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddBgImagesCall extends ethereum.Call {
  get inputs(): AddBgImagesCall__Inputs {
    return new AddBgImagesCall__Inputs(this);
  }

  get outputs(): AddBgImagesCall__Outputs {
    return new AddBgImagesCall__Outputs(this);
  }
}

export class AddBgImagesCall__Inputs {
  _call: AddBgImagesCall;

  constructor(call: AddBgImagesCall) {
    this._call = call;
  }

  get _dataUrls(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }
}

export class AddBgImagesCall__Outputs {
  _call: AddBgImagesCall;

  constructor(call: AddBgImagesCall) {
    this._call = call;
  }
}

export class AddFavCoinsCall extends ethereum.Call {
  get inputs(): AddFavCoinsCall__Inputs {
    return new AddFavCoinsCall__Inputs(this);
  }

  get outputs(): AddFavCoinsCall__Outputs {
    return new AddFavCoinsCall__Outputs(this);
  }
}

export class AddFavCoinsCall__Inputs {
  _call: AddFavCoinsCall;

  constructor(call: AddFavCoinsCall) {
    this._call = call;
  }

  get _mintPrices(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _dataUrls(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }
}

export class AddFavCoinsCall__Outputs {
  _call: AddFavCoinsCall;

  constructor(call: AddFavCoinsCall) {
    this._call = call;
  }
}

export class AddImageSetsCall extends ethereum.Call {
  get inputs(): AddImageSetsCall__Inputs {
    return new AddImageSetsCall__Inputs(this);
  }

  get outputs(): AddImageSetsCall__Outputs {
    return new AddImageSetsCall__Outputs(this);
  }
}

export class AddImageSetsCall__Inputs {
  _call: AddImageSetsCall;

  constructor(call: AddImageSetsCall) {
    this._call = call;
  }

  get _mintPrices(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _designers(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _dataUrls(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }
}

export class AddImageSetsCall__Outputs {
  _call: AddImageSetsCall;

  constructor(call: AddImageSetsCall) {
    this._call = call;
  }
}

export class AddLockOptionCall extends ethereum.Call {
  get inputs(): AddLockOptionCall__Inputs {
    return new AddLockOptionCall__Inputs(this);
  }

  get outputs(): AddLockOptionCall__Outputs {
    return new AddLockOptionCall__Outputs(this);
  }
}

export class AddLockOptionCall__Inputs {
  _call: AddLockOptionCall;

  constructor(call: AddLockOptionCall) {
    this._call = call;
  }

  get _minAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _lockDuration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _discount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AddLockOptionCall__Outputs {
  _call: AddLockOptionCall;

  constructor(call: AddLockOptionCall) {
    this._call = call;
  }
}

export class RemoveBgImageCall extends ethereum.Call {
  get inputs(): RemoveBgImageCall__Inputs {
    return new RemoveBgImageCall__Inputs(this);
  }

  get outputs(): RemoveBgImageCall__Outputs {
    return new RemoveBgImageCall__Outputs(this);
  }
}

export class RemoveBgImageCall__Inputs {
  _call: RemoveBgImageCall;

  constructor(call: RemoveBgImageCall) {
    this._call = call;
  }

  get _bgImageId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveBgImageCall__Outputs {
  _call: RemoveBgImageCall;

  constructor(call: RemoveBgImageCall) {
    this._call = call;
  }
}

export class RemoveFavCoinCall extends ethereum.Call {
  get inputs(): RemoveFavCoinCall__Inputs {
    return new RemoveFavCoinCall__Inputs(this);
  }

  get outputs(): RemoveFavCoinCall__Outputs {
    return new RemoveFavCoinCall__Outputs(this);
  }
}

export class RemoveFavCoinCall__Inputs {
  _call: RemoveFavCoinCall;

  constructor(call: RemoveFavCoinCall) {
    this._call = call;
  }

  get _favCoinId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveFavCoinCall__Outputs {
  _call: RemoveFavCoinCall;

  constructor(call: RemoveFavCoinCall) {
    this._call = call;
  }
}

export class RemoveImageSetCall extends ethereum.Call {
  get inputs(): RemoveImageSetCall__Inputs {
    return new RemoveImageSetCall__Inputs(this);
  }

  get outputs(): RemoveImageSetCall__Outputs {
    return new RemoveImageSetCall__Outputs(this);
  }
}

export class RemoveImageSetCall__Inputs {
  _call: RemoveImageSetCall;

  constructor(call: RemoveImageSetCall) {
    this._call = call;
  }

  get _nftImageId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveImageSetCall__Outputs {
  _call: RemoveImageSetCall;

  constructor(call: RemoveImageSetCall) {
    this._call = call;
  }
}

export class RemoveLockOptionCall extends ethereum.Call {
  get inputs(): RemoveLockOptionCall__Inputs {
    return new RemoveLockOptionCall__Inputs(this);
  }

  get outputs(): RemoveLockOptionCall__Outputs {
    return new RemoveLockOptionCall__Outputs(this);
  }
}

export class RemoveLockOptionCall__Inputs {
  _call: RemoveLockOptionCall;

  constructor(call: RemoveLockOptionCall) {
    this._call = call;
  }

  get _lockOptionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveLockOptionCall__Outputs {
  _call: RemoveLockOptionCall;

  constructor(call: RemoveLockOptionCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetNonTokenPriceMultiplierCall extends ethereum.Call {
  get inputs(): SetNonTokenPriceMultiplierCall__Inputs {
    return new SetNonTokenPriceMultiplierCall__Inputs(this);
  }

  get outputs(): SetNonTokenPriceMultiplierCall__Outputs {
    return new SetNonTokenPriceMultiplierCall__Outputs(this);
  }
}

export class SetNonTokenPriceMultiplierCall__Inputs {
  _call: SetNonTokenPriceMultiplierCall;

  constructor(call: SetNonTokenPriceMultiplierCall) {
    this._call = call;
  }

  get _nonTokenPriceMultiplier(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNonTokenPriceMultiplierCall__Outputs {
  _call: SetNonTokenPriceMultiplierCall;

  constructor(call: SetNonTokenPriceMultiplierCall) {
    this._call = call;
  }
}

export class SetQNftCall extends ethereum.Call {
  get inputs(): SetQNftCall__Inputs {
    return new SetQNftCall__Inputs(this);
  }

  get outputs(): SetQNftCall__Outputs {
    return new SetQNftCall__Outputs(this);
  }
}

export class SetQNftCall__Inputs {
  _call: SetQNftCall;

  constructor(call: SetQNftCall) {
    this._call = call;
  }

  get _qnft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetQNftCall__Outputs {
  _call: SetQNftCall;

  constructor(call: SetQNftCall) {
    this._call = call;
  }
}

export class SetTokenPriceMultiplierCall extends ethereum.Call {
  get inputs(): SetTokenPriceMultiplierCall__Inputs {
    return new SetTokenPriceMultiplierCall__Inputs(this);
  }

  get outputs(): SetTokenPriceMultiplierCall__Outputs {
    return new SetTokenPriceMultiplierCall__Outputs(this);
  }
}

export class SetTokenPriceMultiplierCall__Inputs {
  _call: SetTokenPriceMultiplierCall;

  constructor(call: SetTokenPriceMultiplierCall) {
    this._call = call;
  }

  get _tokenPriceMultiplier(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTokenPriceMultiplierCall__Outputs {
  _call: SetTokenPriceMultiplierCall;

  constructor(call: SetTokenPriceMultiplierCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
